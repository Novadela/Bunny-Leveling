/*
Program Name: Gamba
Date: 03-01-2025
Program Purpose: This program will make the player place bets until they reach desired moneyyyy or broke ($0) :(
*/

// main.cpp : Defines the entry point for the console application.

#include <iostream>
#include <iomanip>
#include <string>
#include <stdio.h>

using namespace std;

unsigned askForInititalStakeAmountFunc();
unsigned askForBetDonePlayingFunc(unsigned& stakeUns);
unsigned rollDemBonesFunc(unsigned& rollCountUns);
void     evaluateRollFunc(unsigned diceRollResultsUns, unsigned& rollCountUns, unsigned& stakeUns, unsigned betUns);
bool     pointRollDemBonesFunc(unsigned pointUns, unsigned& rollCountUns);

int main() {
    unsigned
        betUns,
        rollCountUns = 0,
        diceRollResultsUns;

    // Instructions.
    cout << "This game uses two dice and your money >:)" << endl;
    cout << "Guide:" << endl;
    cout << endl;
    cout << "The stake is the amount of money you brought to the casino." << endl;
    cout << "Winning = Gain DOUBLE the amount of money placed on bet. :D" << endl;
    cout << "Losing = Lose the amount of money placed on bet. >:Y" << endl;
    cout << "Rolling a total of 2, 3, or 12 on the first roll of a bet is an INSTANT LOSS!" << endl;
    cout << "Rolling a total of 7 or 11 on the first roll of a bet is an INSTANT WINNN!" << endl;
    cout << "Rolling any other number will set that number to as a point (your goal total for the following rolls)" << endl;
    cout << "After the first roll of a bet, rolling your point is a WIN! but rolling a 7 is a LOSS!" << endl;
    cout << "You will keep rolling until you either roll your point or a 7. *good luck*" << endl;
    cout << endl;

    // assign stakeUns result from askForInititalStakeAmountFunc();
    unsigned stakeUns = askForInititalStakeAmountFunc();

    do {
        // assign betUns result from askForBetDonePlayingFunc(stakeUns);
        betUns = askForBetDonePlayingFunc(stakeUns);

        // based on betUns determine wether or not to call rollDemBonesFunc(rollCountUns)
        if (betUns > 0)
        {
            diceRollResultsUns = rollDemBonesFunc(rollCountUns);

            // and then call evaluateRollFunc(diceRollResultsUns, rollCountUns, stakeUns, betUns);
            evaluateRollFunc(diceRollResultsUns, rollCountUns, stakeUns, betUns);
        }


    } while (betUns != 0 && stakeUns != 0); //$ execute loop as long as betUns != 0 and stakeUns != 0;

    // Out of loop, check if betUns is 0
    if (betUns == 0)
    {
        // display player ends game
        cout << "Player has ended the Game" << endl;

        cout << endl;
        cout << "Summary!" << endl;
        cout << endl;

        // display a Roll Count message
        cout << "Amount of rolls: " << rollCountUns << endl;

        // display a final stake amount message
        cout << "Final Stake Amount: $" << stakeUns << endl;

        // Hold the screen before exiting

        cout << "Press enter key once or twice to end ... " << endl; cin.ignore(); cin.get();
    }

    // else
    else
    {
        // display player out of money
        cout << "Player is out of money :(" << endl;

        cout << endl;
        cout << "Summary!" << endl;
        cout << endl;

        // display a Roll Count message
        cout << "Amount of rolls: " << rollCountUns << endl;

        // display a final stake amount message
        cout << "Final Stake Amount: $" << stakeUns << endl;

        // Hold the screen before exiting
        cout << endl;

        cout << "Press enter key once or twice to end ... " << endl; cin.ignore(); cin.get();
    }

    exit(EXIT_SUCCESS);
}

/*
Name:              askForInitialStakeAmountFunc
Function Purpose:  Retrieves the initial money from prompting the user
Function Design:   Checks if the input stake amount the player enters a proper amount:
                   stakeStartUns > 0
                   not a negative amount
Inputs:            None
Outputs:           By function name an unsigned integer that's the stake amount
*/

unsigned askForInititalStakeAmountFunc() {

    int stakeStartUns;

    do
    {
        // ask for stake amount
        cout << "What is your stake amount? $";
        cin >> stakeStartUns;

        cout << endl;

        // if stake amount > 0) leave check loop
        if (stakeStartUns > 0)
        {
            break;
        }

        // else 
        else
        {
            //$ display message that You have to enter a > 0 or positive amount of money to bet with. Try again!
            cout << "You have to enter a > 0 or positive amount of money to bet with. Try again!" << endl;
        }
        // continue the loop
    } 
    while (true);

    // return stake start amount
    return (stakeStartUns);
}

/*
Name: askForBetDonePlayingFunc
Function Purpose : Asks for what the player will bet and checks for validity
Function Design:   Checks for valid entry
                   if not valid entry, staes the reason why
                   retry entry if not valid
Inputs:            stakeUns - The total stake amount
Outputs:           By function name an unsigned integer that's the bet amount
*/

unsigned askForBetDonePlayingFunc(unsigned& stakeUns) {

    // design necessary code
    int betStartUns;

    // display current stake amount
    cout << "Current Stake Amount: $" << stakeUns << endl;

    cout << endl;

    // Design a validation loop
    do
    {
        // ask for a bet
        cout << "What will you bet? $";
        cin >> betStartUns;

        cout << endl;

        // check if input bet amount is less than 0
        if (betStartUns < 0)
        {
            // display error message
            cout << "Your bet amount must be greater than 0. Enter a bigger bet amount!" << endl;

            cout << endl;
        }
        // continue the loop

        // check if input amount more than stake amount
        else if (betStartUns > stakeUns)
        {
            // display error message
            cout << "Your bet amount must be less than your stake amount. Enter a lower bet amount!" << endl;

            cout << endl;
        }
        // continue the loop

        // set valid bet amount
        else
        {
            // leave the loop
            break;
        }
    } while (true);

     // return the valid inputted bet
    return (betStartUns);
}

/*
Name:             rollDemBonesFunc
Function Purpose: generates an independent random number for each die
                  calculates the roll sum
                  increments rollCountUns
Function Design:  Prompts the user to throw the dice
                  Using rand() generates 2 random variables from 1 to 6 and adds to simulate dice throw
Inputs/Outpuut:   &rollCountUns - Reference of total rolls count in game
Outputs:          By function name an unsigned integer that's the sum of the two rolled dice
*/

unsigned rollDemBonesFunc(unsigned& rollCountUns) {

    // display Press enter key once or twice to throw the dice
    // see assigment to use ignore() and get() to hold the screen
    cout << "Press enter key once or twice to throw the dice" << endl; cin.ignore(); cin.get();

    // increment the roll count
    rollCountUns += 1;

    // seed the random number generator
    srand(clock());

    // execute the dice roll as two separete rolls
    unsigned roll1 = rand() % 6 + 1;

    // display die 1 result
    cout << "Die 01 is " << roll1 << endl;

    unsigned roll2 = rand() % 6 + 1;

    // display die 2 result
    cout << "Die 02 is " << roll2 << endl;

    unsigned diceSum = roll1 + roll2;

    cout << "The dice throw results: " << diceSum << "!" << endl;

    cout << endl;

    // return the dice sum
    return(diceSum);
}

/*
Name: evaluateRollFunc
Function Purpose: Check for a winning roll, a losing roll, or a point roll result
                  Adjust stakeUns using betUns for win or loss result
Function Design:  2, 3, 12      loses - L
                  7, 11         winner - W
                  anything else executes point rolls
Inputs:           diceRollResultsUns - The dice roll sum
                  betUns             - The placed bet
Input/Output:     &rollCountUns      - Reference to tally of total rolls
                  &stakeUns          - Reference to the total at stake
*/

void evaluateRollFunc(unsigned diceRollResultsUns, unsigned& rollCountUns, unsigned& stakeUns, unsigned betUns) 
{
    // If dice roll sum is 2, 3, or 12
    if (diceRollResultsUns == 2 || diceRollResultsUns == 3 || diceRollResultsUns == 12)
    {
        
        // Display a message saying the user lost
        cout << "Sorry, you lose. *lmao*" << endl;

        cout << endl;

        stakeUns -= betUns;
    }

    // Else if dice roll sum is 7 or 11
    else if (diceRollResultsUns == 7 || diceRollResultsUns == 11)
    {
        // Display a message saying the user won
        cout << "We've got ourselves a winner! You received DOUBLE your bet! WOOO" << endl;

        cout << endl;

        stakeUns += betUns * 2;
    }
    
    else
    {
        cout << "The point is " << diceRollResultsUns << endl;

        cout << "Throw em again and hope that luck is on your side!" << endl;

        cout << endl;

        bool win = pointRollDemBonesFunc(diceRollResultsUns, rollCountUns);
        if (win)
        {
            stakeUns += betUns * 2;
        }
        else
        {
            stakeUns -= betUns;
        }
    }
}

/*
Name:             pointRollDemBonesFunc
Function Purpose: Executes the point rolls
Function Design:  Displays the point value.
                  Executes repeating rolls using rollDemBonesFunc until the point or 7 is the result
                  Each roll passes to rollDemBonesFunc() the rollCountUns and recives back the rollCountUns
Inputs:           pointUns      - The point set by the first roll
Inputs/Outputs    &rollCountUns - Reference to total roll count
Outputs:          After point rolls produces a return for a win (true) or a loss (false)
*/

bool pointRollDemBonesFunc(unsigned pointUns, unsigned& rollCountUns) {

    unsigned pointRollUns;

    //Executes until point value or 7 is rolled
    while (true)
    {
        pointRollUns = rollDemBonesFunc(rollCountUns);
        
        if (pointRollUns == pointUns)
        {
            cout << "We've got ourselves a winner! You received DOUBLE your bet! WOOO" << endl;
            return (true);
        }
        
        else if (pointRollUns == 7)
        {
            cout << "Sorry, you lose. *lmao*" << endl;
            return (false);
        }
        else
        {
            cout << "The point is " << pointUns << endl;
            cout << "Throw em again and hope that luck is on your side!" << endl;

            cout << endl;
        }
    }
}
